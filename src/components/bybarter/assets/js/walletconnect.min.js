"use strict";

/**
 * Example JavaScript code that interacts with the page and Web3 wallets
 */

// Unpkg imports
const Web3Modal = window.Web3Modal.default;
const WalletConnectProvider = window.WalletConnectProvider.default;
let BASE_URL = $("#base_url").val();

var web3 = new Web3(Web3.givenProvider);
// const ContractAddress = contractAddress;
// var CeldonContract = new web3.eth.Contract(contractABI, ContractAddress);

// Web3modal instance
let web3Modal;

// Chosen wallet provider given by the dialog window
let provider;

// Address of the selected account
let selectedAccount;

/**
 * Setup the orchestra
 */
function init() {

    console.log("Initializing example");
    console.log("WalletConnectProvider is", WalletConnectProvider);

    const providerOptions = {
        walletconnect: {
            package: WalletConnectProvider,
            options: {
                rpc: {
                    97: "https://speedy-nodes-nyc.moralis.io/c415cc39a145c4104109b7b0/bsc/testnet",
                    56: "https://bsc-dataseed.binance.org/"
                },
                rpc: {
                    3: "https://ropsten.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161",
                    1: "https://etherscan.io/"
                },
                infuraId: "9aa3d95b3bc440fa88ea12eaa4456161",
            }
        },
    };

    web3Modal = new Web3Modal({
        cacheProvider: true, // optional
        providerOptions, // required
    });

}



$(document).ready(async function() {
    if (localStorage.getItem("WEB3_CONNECT_CACHED_PROVIDER") != null) {
        init();
        onConnect();
        $("#dis-connect").removeClass("d-none");
    } else {
        const cId = await web3.eth.getChainId();
        var chainID = Number(c_id);
        if (cId != chainID) {
            $("#change-network").modal("show");
        }
        $("#connect").removeClass("d-none");
        return false;
    }
});

async function fetchAccountData() {

    // Get a Web3 instance for the wallet
    const web3 = new Web3(provider);
    // Get connected chain id from Ethereum node
    const chainId = await web3.eth.getChainId();
    var chainID = Number(c_id);
    if (chainId != chainID) {

        if (provider.close) {
            await provider.disconnect();

            await web3Modal.clearCachedProvider();
            provider = null;
        }
        selectedAccount = null;
        $("#change-chain-modal").modal("show");
        $('#btn-disconnect').addClass('d-none');
        $('#connect').removeClass('d-none');
        // localStorage.removeItem("WEB3_CONNECT_CACHED_PROVIDER");
        // localStorage.removeItem("walletconnect");
        $('#ConnectMetamask').show();
        return false;
    }

    $("#change-chain-modal").modal("hide");

    // Get list of accounts of the connected wallet
    const accounts = await web3.eth.getAccounts();

    // MetaMask does not give you all accounts, only the selected account
    selectedAccount = accounts[0];

    if (window.location.href == base_url + '/') {
        var is_login = await checkIsregister(selectedAccount);
        // alert(is_login);
        if (is_login == false && localStorage.getItem("user_id") != null) {
            await logout();
            $('#btn-disconnect').addClass('d-none');
            $('#connect').removeClass('d-none');
            return;
        }
    }
    // setTimeout(async function () {
    if (selectedAccount != undefined) {
        $(".test_class").append("<br>");
        $(".test_class").append("user_id = " + JSON.stringify(user_id));
        // // alert(user_id);
        // alert(user_id);

        var check_url = window.location.href;

        if (localStorage.getItem("user_id") === null) {
            await signup(selectedAccount);
        } else {
            user_id = localStorage.getItem("user_id");
            $("#login_username").html(localStorage.getItem("user_name"));
            // $("#login_username").html(localStorage.getItem("user_name")); 
            // id_user
            $(".connected_div").removeClass("d-none");
            $(".disconnected_div").addClass("d-none");
            $("#second_connect_div").addClass("d-none");
            $("#id_user").val(user_id);
            var check_url = window.location.href;
            if (check_url.includes("profile") == true) {
                getUserData(selectedAccount);
            } else if (check_url.includes("buy-coins") == true) {
                var trade_user_id = $("#trade_user_id").val();
                if (trade_user_id != user_id) {
                    $(".not_same_owner_come").removeClass('d-none');
                    $(".same_owner_come").addClass('d-none');
                } else {
                    $(".same_owner_come").removeClass('d-none');
                    $(".not_same_owner_come").addClass('d-none');
                }
            } else if (check_url.includes("order-detail") == true) {
                var seller_id = $("#seller_id").val();
                if (seller_id != user_id) {
                    $(".not_saller_user_div").removeClass('d-none');
                    $(".saller_user_div").addClass('d-none');
                } else {
                    $(".saller_user_div").removeClass('d-none');
                    $(".not_saller_user_div").addClass('d-none');
                }
            } else if (check_url.includes("chat") == true) {
                $("#id_login_user").val(user_id);
                var seller_id = $("#seller_id").val();
                var buyer_id = $("#buyer_id").val();
                checkUserRate(user_id, seller_id, buyer_id);
                if (user_id == buyer_id) {

                    $(".user_buyer_div").removeClass('d-none');
                    $(".not_user_buyer_div").addClass('d-none');
                    $("#to_user").val(seller_id);
                    $(".buyer_div").removeClass('d-none');
                    $(".seller_div").addClass('d-none');
                } else {
                    $(".user_buyer_div").addClass('d-none');
                    $(".not_user_buyer_div").removeClass('d-none');
                    $("#to_user").val(buyer_id);
                    $(".buyer_div").addClass('d-none');
                    $(".seller_div").removeClass('d-none');
                }
            }

        }

    }
    if (typeof selectedAccount == 'undefined') {
        Toast('Please Unlock Your Metamask.', 3000, 0);
        setTimeout(async function() {
            await onDisconnect();
        }, 1000)

        return false;
    }
    $("#address").val(selectedAccount);
    if (is_live != "local" || is_live != "test") {
        $("#etherscan_address").attr(
            "href",
            "https://ropsten.etherscan.io/address/" + selectedAccount
        );
        // $("#etherscan_address").attr(
        //     "href",
        //     "https://testnet.bscscan.com/address/" + selectedAccount
        // );
    } else {
        $("#etherscan_address").attr(
            "href",
            "https://bscscan.com/address/" + selectedAccount
        );
    }
    let connectedAddress = selectedAccount.substr(0, 4) + " ... " + selectedAccount.substr(selectedAccount.length - 4, 4);

    $('#btn-disconnect').html(connectedAddress);
    $('.meta_address').html(connectedAddress);
    $('#btn-disconnect').removeClass('d-none');
    $('#connect').addClass('d-none');
    $('.checklogin').show();


    // },3000);

    // const rowResolvers = accounts.map(async (address) => {
    //     const balance = await web3.eth.getBalance(address);
    //     const ethBalance = web3.utils.fromWei(balance, "ether");
    //     const humanFriendlyBalance = parseFloat(ethBalance).toFixed(4);
    // });
    // await Promise.all(rowResolvers);
}

async function onConnect() {
    $('#btn-disconnect').addClass('d-none');
    $('#connect').removeClass('d-none');
    try {
        provider = await web3Modal.connect();
        $("#ConnectMetamask").hide();
        $("#dis-connect").removeClass("d-none");
        $("#connect").addClass("d-none");
    } catch (e) {
        console.log(e);
        selectedAccount = null;
        $("#ConnectMetamask").prop("disabled", false);
        $("#ConnectMetamask .fa-spinner").hide();
        Toast("Please connect to your wallet.", 3000, 0);
        return false;
    }
    var check = JSON.parse(
        localStorage.getItem("WEB3_CONNECT_CACHED_PROVIDER")
    );
    if (check == "injected") {
        if (typeof ethereum === "undefined") {
            Toast(
                "There appears to be no Metamask Install on your browser, please try another browser or use wallet connect.",
                6000,
                0
            );
            if (provider.close) {
                await provider.disconnect();

                await web3Modal.clearCachedProvider();
                provider = null;
            }
            localStorage.removeItem("WEB3_CONNECT_CACHED_PROVIDER");
            return;
        }
    }

    // // Subscribe to accounts change
    provider.on("accountsChanged", async (accounts) => {
        if (user_id != "") {
            await logout(selectedAccount)
        }
        debugger
        location.reload();
    });

    // Subscribe to chainId change
    provider.on("chainChanged", async (chainId) => {
        if (user_id != "") {
            await logout(selectedAccount)
        }
        debugger
        location.reload();
    });

    // Subscribe to networkId change
    provider.on("networkChanged", async (networkId) => {
        if (user_id != "") {
            await logout(selectedAccount)
        }
        debugger
        location.reload();
    });

    return await fetchAccountData();
}


async function onDisconnect() {

    if (provider.close) {
        await provider.disconnect();
        await web3Modal.clearCachedProvider();
        provider = null;
    }
    localStorage.removeItem("WEB3_CONNECT_CACHED_PROVIDER");

    $('#btn-disconnect').addClass('d-none');
    $('#connect').removeClass('d-none');
    $('.checklogin').hide();
    await logout(selectedAccount);
    selectedAccount = null;
}

$("#connect").click(async function(event) {
    debugger;
    await init();
    var flag = await onConnect();
    if (flag != false) {
        location.reload();
    }
});

$('#connect1').click(async function(event) {
    await init();
    var flag = await onConnect();
    if (flag != false) {
        location.reload();
    }
})

$(document).on("click", "#disconnect-btn", async function(event) {
    var address = selectedAccount;
    $("#disconnect-model").modal("hide");
    if (provider.close) {
        await provider.disconnect();
        await web3Modal.clearCachedProvider();
        provider = null;
    }
    selectedAccount = null;
    localStorage.removeItem("WEB3_CONNECT_CACHED_PROVIDER");

    $('#btn-disconnect').addClass('d-none');
    $('#connect').removeClass('d-none');
    $('.checklogin').hide();
    logout(address);
    setTimeout(function() {
        location.reload();
    }, 2000);
    // if(lg)
    // {
    // }
});
$("#btn-disconnect").click(function() {
    $("#disconnect-metamask-modal").modal("show");
});
var bnb_block_url = "";
var bnb_rpc_url = "";
if (is_live != "local" || is_live != "test") {
    bnb_block_url = "https://testnet.bscscan.com";
    bnb_rpc_url = RPC_url;
} else {
    bnb_block_url = "https://bscscan.com";
    bnb_rpc_url = RPC_url;
}

$(document).on("click", "#change-network-btn", async function(event) {
    const chain = web3.utils.toHex(c_id);

    try {
        await ethereum.request({
            method: 'wallet_switchEthereumChain',
            params: [{
                chainId: chain
            }],
        });
    } catch (switchError) {

        if (switchError.code === 4902) {
            try {
                await ethereum.request({
                    method: 'wallet_addEthereumChain',
                    params: [{
                        chainId: chain,
                        chainName: 'Binance Smart Chain',
                        nativeCurrency: {
                            name: 'Binance Coin',
                            symbol: 'BNB',
                            decimals: 18
                        },
                        blockExplorerUrls: [bnb_block_url],
                        rpcUrls: [bnb_rpc_url],
                    }],
                });
            } catch (error) {
                console.log('---error---');
                console.log(error);
            }
        }
    }
});

$(document).on('click', '#copy_referal_link', function(event) {
    var value = $('#copy_referal_link').val();
    var $temp = $("<input>");
    $("body").append($temp);
    $temp.val(value).select();
    document.execCommand("copy");
    $temp.remove();
    Toast('Copied', 3000, 1);
});

$(document).on("click", "#copy_address", async function(event) {
    var value = selectedAccount;
    var $temp = $("<input>");
    $("#disconnect-metamask-modal").append($temp);
    $temp.val(value).select();
    document.execCommand("copy");
    $temp.remove();
    Toast("Address Copied.", 3000, 1);
});


async function signup(address) {
    var token = $("#token").val();
    setTimeout(async function() {

        var perent_user_name = $("#perent_user_name").val();
        var jdata = {
            "_token": token,
            "address": address,
            "perent_user_name": perent_user_name
        }
        await $.ajax({
            type: 'POST',
            url: login_url,
            data: jdata,
            success: function(res) {
                $(".test_class").append("<br>");
                $(".test_class").append(JSON.stringify(res));
                console.log('------------------------------------');
                console.log(res);
                console.log('------------------------------------');
                if (res.flag == 1) {
                    Toast(res.msg, 2000, res.flag);
                    localStorage.setItem("user_id", res.data.id);
                    localStorage.setItem("user_name", res.data.user_name);

                    // Toast(res.msg, 2000, res.flag);
                    setTimeout(function() {
                        window.location.href = BASE_URL
                    }, 2000);
                } else if (res.flag == 2) {
                    Toast(res.msg, 2000, 0);
                    // setTimeout(function () { window.location.replace(GET_URL('user/my-wallets')) }, 2000);
                } else if (res.flag == 3) {
                    Toast(res.msg, 2000, 1);
                    // setTimeout(function () { window.location.href =BASE_URL+'/'+'two-factor-authentication' }, 2000);
                } else if (res.flag == 4) {
                    Toast(res.msg, 2000, 3);
                    setTimeout(function() {
                        window.location.href = BASE_URL + '/' + 'user/my-wallets'
                    }, 2000);
                } else if (res.flag == 5) {
                    Toast(res.msg, 2000, 3);
                    setTimeout(function() {
                        window.location.href = BASE_URL + '/' + 'user/profile'
                    }, 2000);
                } else {
                    Toast(res.msg, 2000, res.flag);
                }

            },
        });
    }, 1000);

    // $('#login_form').ajaxForm(function (res) {

    //     if (res != '') {

    //         $("#btn_spinner").addClass('d-none');
    //         $("#login_submit_btn").prop('disabled', false).removeClass('disabled');
    //     }
    // }).submit();
}

async function checkIsregister(address) {
    var _return = false;
    if (localStorage.getItem("user_id") != null) {
        var token = $("#token").val();
        var jdata = {
            "_token": token,
            "address": address
        }
        await $.ajax({
            type: 'POST',
            url: check_register_url,
            data: jdata,
            success: async function(res) {
                if (res.is_login == true) {
                    _return = true;
                }
            }
        });
    }
    return _return;

}

function getUserData(address) {
    var token = $("#token").val();
    var jdata = {
        "_token": token,
        "address": address
    }
    $.ajax({
        type: 'POST',
        url: get_user_url,
        data: jdata,
        success: function(res) {
            var data = res.data
            $("#factor_user_id").val(data.user_id);
            $("#id_disable_user").val(data.user_id);

            $("#name_user").val(data.user_name);
            $("#email_user").val(data.email);
            $(".email_span").html(data.email);
            $("#refferral_url").val(base_url + "?user_name=" + data.refferal_name);
            // refferal_name
            $("#previewImg").attr("src", data.profile_img);
            // qr_image
            var _2fa = data.google2fa_status;
            if (_2fa == 0) {
                $('#disable-2fa-tab-btn').addClass('d-none');
                $('#enable-2fa-tab-btn').removeClass('d-none');
            } else {
                $('#enable-2fa-tab-btn').addClass('d-none');
                $('#disable-2fa-tab-btn').removeClass('d-none');
            }

            return true;
        }
    });
    return false;
}